import {AnimatedObject, EquipmentItem, AnimationInfo} from "./main";
import {context} from "./main";
import {LANE} from "./main";

export class PlayerCharacter extends AnimatedObject{
    public equippedItems: Record <string, EquipmentItem>;
    public stats: Record <string, number>;
    public weapon: string | null;
    public weapons: Record <string, string>;
    public directionChange: number;
    public attacking: boolean;
    public lane: number;
    public state: string;
    public PREPARE_SPEAR_FRAMES: number;
    constructor(x: number, y: number,
        spritesheetURL: string, animationInfo: AnimationInfo,
        lane: number, state: string, width: number, height: number,
        startingItems: Record <string, EquipmentItem>, startingStats: Record <string, number>, weapons: Record <string, string>){
        super(x, y, width, height, spritesheetURL, animationInfo);
        this.equippedItems = startingItems;
        this.stats = startingStats;
        this.weapon = null;
        this.weapons = weapons;
        this.directionChange = 0;
        this.attacking = false;
        this.lane = lane;
        this.state = state;
        this.PREPARE_SPEAR_FRAMES = 4;
    }
    roll(deltaTime: number){
            this.x += this.stats.RollSpeed * deltaTime/1000 * this.directionChange;
    }
    statsUpdate(){
        if (this.equippedItems.Armor != null){
            this.stats.Lives = 2;
        }
        if (this.equippedItems.Boots != null){
            this.stats.RollSpeed = 600;
        }
        if (this.equippedItems.Spear != null){
            this.weapon = this.weapons.Spear;
            this.animationInfo = playerSpearAnimationInfo;
        }
        if (this.equippedItems.Bow != null){
            this.weapon = this.weapons.Bow;
            this.animationInfo = playerBowAnimationInfo;
        }
        console.log(this.weapon);
        if (this.weapon != null){
            this.spritesheet.src = this.weapon;
        }
    }
    draw(): undefined{
        if (this.currentAnimation == null) {
            return;
        }
        // const frameW = this.spritesheet.width / this.currentAnimation.frameCount;
        const frameW = this.spritesheet.width / 13;
        const frameH = this.spritesheet.height / this.animationInfo.animationCount;
        console.assert(frameW > 0);
        console.assert(frameH > 0);
        const frameSX = this.currentAnimationFrame * frameW;
        const frameSY = this.currentAnimation.rowIndex * frameH;
        console.assert(frameW >= 0);
        console.assert(frameH >= 0);
        context.drawImage(this.spritesheet,
            frameSX, frameSY, frameW, frameH,
            this.x - this.width / 2, this.y - this.height / 2, this.width, this.height
        );
    }
    changeLane(){
        this.x = this.lane * LANE.WIDTH - LANE.WIDTH/2;
    }
}
// Player Animation Information
export const AnimationNames = {
    RunningBack: "runningBack",
    Jumping: "jumping",
    Ducking: "ducking",
    RollingLeft: "rollingLeft",
    RollingRight: "rollingRight",
    Dying: "dying"
}
export const playerSpearAnimationInfo: AnimationInfo = {
    animationCount: 21, 
    animations: {
        [AnimationNames.RunningBack]: {
            rowIndex: 8,
            frameCount: 8,
            framesPerSecond: 8
        },
        [AnimationNames.Jumping]: {
            rowIndex: 0,
            frameCount: 7,
            framesPerSecond: 7
        },
        [AnimationNames.Ducking]: {
            rowIndex: 4,
            frameCount: 7,
            framesPerSecond: 7
        },
        [AnimationNames.RollingLeft]: {
            rowIndex: 9,
            frameCount: 9,
            framesPerSecond: 9
        },
        [AnimationNames.RollingRight]: {
            rowIndex: 11,
            frameCount: 9,
            framesPerSecond: 9
        },
        [AnimationNames.Dying]: {
            rowIndex: 20,
            frameCount: 6,
            framesPerSecond: 6
        }
    }
};
export const playerBowAnimationInfo: AnimationInfo = {
    animationCount: 21, 
    animations: {
        [AnimationNames.RunningBack]: {
            rowIndex: 8,
            frameCount: 8,
            framesPerSecond: 8
        },
        [AnimationNames.Jumping]: {
            rowIndex: 0,
            frameCount: 7,
            framesPerSecond: 7
        },
        [AnimationNames.Ducking]: {
            rowIndex: 16,
            frameCount: 13,
            framesPerSecond: 13
        },
        [AnimationNames.RollingLeft]: {
            rowIndex: 9,
            frameCount: 9,
            framesPerSecond: 9
        },
        [AnimationNames.RollingRight]: {
            rowIndex: 11,
            frameCount: 9,
            framesPerSecond: 9
        },
        [AnimationNames.Dying]: {
            rowIndex: 20,
            frameCount: 6,
            framesPerSecond: 6
        }
    }
};

// Figure out how to combine these two animation info dictionaries